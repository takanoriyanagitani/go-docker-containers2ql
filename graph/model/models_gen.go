// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type BasicInfoInput struct {
	All     bool            `json:"all"`
	Limit   *int64          `json:"limit,omitempty"`
	Size    bool            `json:"size"`
	Exited  *int64          `json:"exited,omitempty"`
	Health  *HealthStatus   `json:"health,omitempty"`
	ID      *string         `json:"id,omitempty"`
	Name    *string         `json:"name,omitempty"`
	Network *string         `json:"network,omitempty"`
	Status  *ContainerState `json:"status,omitempty"`
}

type BasicInfoOutput struct {
	ID      string         `json:"id"`
	Names   []string       `json:"names"`
	Image   string         `json:"image"`
	ImageID string         `json:"imageID"`
	Command string         `json:"command"`
	Created int64          `json:"created"`
	State   ContainerState `json:"state"`
	Status  string         `json:"status"`
	Health  *Health        `json:"health,omitempty"`
}

type Health struct {
	Status        HealthStatus         `json:"status"`
	FailingStreak int64                `json:"failingStreak"`
	Log           []*HealthcheckResult `json:"log"`
}

type HealthcheckResult struct {
	Start    string `json:"start"`
	End      string `json:"end"`
	ExitCode int64  `json:"exitCode"`
	Output   string `json:"output"`
}

type Query struct {
}

type ContainerState string

const (
	ContainerStateUnspecified ContainerState = "UNSPECIFIED"
	ContainerStateCreated     ContainerState = "CREATED"
	ContainerStateRunning     ContainerState = "RUNNING"
	ContainerStatePaused      ContainerState = "PAUSED"
	ContainerStateRestarting  ContainerState = "RESTARTING"
	ContainerStateRemoving    ContainerState = "REMOVING"
	ContainerStateExited      ContainerState = "EXITED"
	ContainerStateDead        ContainerState = "DEAD"
)

var AllContainerState = []ContainerState{
	ContainerStateUnspecified,
	ContainerStateCreated,
	ContainerStateRunning,
	ContainerStatePaused,
	ContainerStateRestarting,
	ContainerStateRemoving,
	ContainerStateExited,
	ContainerStateDead,
}

func (e ContainerState) IsValid() bool {
	switch e {
	case ContainerStateUnspecified, ContainerStateCreated, ContainerStateRunning, ContainerStatePaused, ContainerStateRestarting, ContainerStateRemoving, ContainerStateExited, ContainerStateDead:
		return true
	}
	return false
}

func (e ContainerState) String() string {
	return string(e)
}

func (e *ContainerState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContainerState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContainerState", str)
	}
	return nil
}

func (e ContainerState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ContainerState) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ContainerState) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type HealthStatus string

const (
	HealthStatusNone      HealthStatus = "NONE"
	HealthStatusStarting  HealthStatus = "STARTING"
	HealthStatusHealthy   HealthStatus = "HEALTHY"
	HealthStatusUnhealthy HealthStatus = "UNHEALTHY"
)

var AllHealthStatus = []HealthStatus{
	HealthStatusNone,
	HealthStatusStarting,
	HealthStatusHealthy,
	HealthStatusUnhealthy,
}

func (e HealthStatus) IsValid() bool {
	switch e {
	case HealthStatusNone, HealthStatusStarting, HealthStatusHealthy, HealthStatusUnhealthy:
		return true
	}
	return false
}

func (e HealthStatus) String() string {
	return string(e)
}

func (e *HealthStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HealthStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HealthStatus", str)
	}
	return nil
}

func (e HealthStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *HealthStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e HealthStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
